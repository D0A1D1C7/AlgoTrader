module base;

@Name('SET_MARGINS')
@Tag(name='listeners', value='com.algoTrader.service.PositionServiceImpl$SetMarginsListener')
select 
	* 
from 
	pattern[every timer:at (0, 7, *, *, 1:5)];
	
@Name('PROPAGATE_TICKS')
@Tag(name='subscriber', value='com.algoTrader.service.MarketDataServiceImpl$PropagateTickSubscriber')
select 
	*
from
	com.algoTrader.entity.marketData.MarketDataEvent;	

@Name('CREATE_PORTFOLIO_VALUE')
@Tag(name='subscriber', value='com.algoTrader.subscriber.PrintPortfolioValueSubscriber')
insert into 
	Portfolio
select 
	current_timestamp() as timestamp,
	LookupUtil.getPortfolioValue() as value,
	cashTransaction
from 
	pattern[every(timer:at (0, 10:18, *, *, 1:5) or cashTransaction=Transaction(type=TransactionType.CREDIT or type=TransactionType.DEBIT or type=TransactionType.INTREST or type=TransactionType.FEES))]
where 
	LookupUtil.hasLastTicks();

@Name('CREATE_MONTHLY_PERFORMANCE')
@Priority(2)
insert into 
	MonthlyPerformance
select 
	current_timestamp().toDate() as date,
	portfolio.value.netLiqValue / prior(1, portfolio.value.netLiqValue) - 1 as value
from 
	pattern[every timer:at (0, 0, 1, *, *) -> portfolio=Portfolio]
having 
	prior(1, portfolio.value.netLiqValue) != null and 
	portfolio.value.netLiqValue != prior(1, portfolio.value.netLiqValue);

@Name('CREATE_CURRENT_VALUE')
@Priority(5)
insert into
      CurrentValue
select
      coalesce(bid.security, trade.security, bar.security, tick.security) as security,
      coalesce((bid.price + ask.price) / 2, trade.price, tick.currentValue, bar.close) as value
from
      pattern [every ((bid=Bid and ask=Ask) or trade=Trade or bar=Bar or tick=Tick)];

@Name('GET_CURRENT_VALUE')
@Priority(6)
select 
	value.security.id as securityId, 
	value.* as value 
from 
	CurrentValue.std:groupwin(security.id).win:time(7 days).win:length(1) as value;

@Name('GET_LAST_TICK')
@Priority(6)
select 
	tick.security.id as securityId, 
	tick.* as tick 
from 
	Tick.std:groupwin(security.id).win:time(7 days).win:length(1) as tick;

@Name('GET_LAST_BAR')
@Priority(6)
select
	bar.security.id as securityId,
	bar.* as bar 
from
	Bar.std:groupwin(security.id).win:time(7 days).win:length(1) as bar;

@Name('GET_LAST_BID')
@Priority(6)
select
	bid.security.id as securityId,
	bid.* as bid 
from
	Bid.std:groupwin(security.id).win:time(7 days).win:length(1) as bid;

@Name('GET_LAST_ASK')
@Priority(6)
select
	ask.security.id as securityId,
	ask.* as ask 
from
	Ask.std:groupwin(security.id).win:time(7 days).win:length(1) as ask;

@Name('GET_LAST_TRADE')
@Priority(6)
select
	trade.security.id as securityId,
	trade.* as trade 
from
	Bar.std:groupwin(security.id).win:time(7 days).win:length(1) as trade;
/*
@Name('CLOSE_POSITION')			// TODO - This is the quick and dirty version!
@Priority(1)
@Tag(name='subscriber', value='com.algoTrader.service.PositionServiceImpl$ClosePositionSubscriber')
select
	position.id
from
	MarketDataEvent as event,
	method:LookupUtil.getPositions(event.security) as position
where
	position.quantity != 0
and
	position.exitValue != null
and
	((position.short and (event.security.currentValue >= position.exitValue))
or
	(position.long and (event.security.currentValue <= position.exitValue)));
*/
@Name('CLOSE_POSITION')
@Priority(1)
@Tag(name='subscriber', value='com.algoTrader.service.PositionServiceImpl$ClosePositionSubscriber')
select
	position.id
from
	CurrentValue as event,
	method:LookupUtil.getPositions(event.security) as position
where
	position.quantity != 0
and
	position.exitValue != null
and
	((position.short and (event.value >= position.exitValue))
or
	(position.long and (event.value <= position.exitValue)));

@Name('CREATE_PERFORMANCE_KEYS')
insert into 
	PerformanceKeys
select 
	uni.datapoints as n, 
	uni.geomaverage as avgM,
	uni.stddev as stdM, 
	Math.pow(1 + uni.geomaverage,12) - 1  as avgY,
	uni.stddev * Math.sqrt(12) as stdY,
	(Math.pow(1 + uni.geomaverage,12) - 1 - marketIntrest) / (uni.stddev * Math.sqrt(12)) as sharpRatio
from 
	MonthlyPerformance.win:keepall().stat:uni(value) as uni;

@Name('KEEP_MONTHLY_PERFORMANCE')
select 
	*
from 
	MonthlyPerformance.win:keepall();

@Name('CREATE_DRAW_DOWN')
insert into 
	DrawDown
select 
	1 - portfolio.value.netLiqValue / max(portfolio.value.netLiqValue) as amount,
case 
	when portfolio.value.netLiqValue = max(portfolio.value.netLiqValue) 
	then DrawDownUtil.resetDrawDownPeriod() 
	else DrawDownUtil.increaseDrawDownPeriod(current_timestamp - prior(1, portfolio.timestamp)) end as period
from 
	Portfolio as portfolio;

@Name('CREATE_MAX_DRAW_DOWN')
insert into 
	MaxDrawDown
select 
	max(drawDown.amount) as amount,
	max(drawDown.period) as period
from 
	DrawDown as drawDown;

@Name('CREATE_FILL')
insert into
      Fill
select
	  fill.*
from 
	pattern[every (genericOrder=GenericOrder -> (openOrder=OpenOrder(orderId = genericOrder.number) and execDetails=ExecDetails(execution.m_orderId = genericOrder.number)))], 
	method:IBOrderUtil.getFill(genericOrder, openOrder, execDetails) as fill;

@Name('CREATE_TRANSACTION')
@Tag(name='subscriber', value='com.algoTrader.service.TransactionServiceImpl$CreateTransactionSubscriber')
select
      engineStrategy.name as strategyName,
      fill as fill
from 
      Fill as fill;
