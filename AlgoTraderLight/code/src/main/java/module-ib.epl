// ----------------------------- MARKET DATA -----------------------------	

@Name('UPDATE_TICK_WINDOW_BID')
on
	IBTickPrice as tickPrice
update
	TickWindow as tickWindow
set
	tickWindow.bid = RoundUtil.getBigDecimal(tickPrice.price)
where
	tickPrice.field = 1 
and
	tickWindow.tickerId = tickPrice.tickerId;
	
@Name('UPDATE_TICK_WINDOW_ASK')
on
	IBTickPrice as tickPrice
update
	TickWindow as tickWindow
set
	tickWindow.ask = RoundUtil.getBigDecimal(tickPrice.price)
where
	tickPrice.field = 2 
and
	tickWindow.tickerId = tickPrice.tickerId;

@Name('UPDATE_TICK_WINDOW_LAST')
on
	IBTickPrice as tickPrice
update
	TickWindow as tickWindow
set
	tickWindow.last = RoundUtil.getBigDecimal(tickPrice.price)
where
	tickPrice.field = 4 
and
	tickWindow.tickerId = tickPrice.tickerId;

@Name('UPDATE_TICK_WINDOW_VOLASK')
on
	IBTickSize as tickSize
update
	TickWindow as tickWindow
set
	tickWindow.volAsk = tickSize.size
where
	tickSize.field = 3 
and
	tickWindow.tickerId = tickSize.tickerId;

@Name('UPDATE_TICK_WINDOW_VOLBID')
on
	IBTickSize as tickSize
update
	TickWindow as tickWindow
set
	tickWindow.volBid = tickSize.size
where
	tickSize.field = 0 
and
	tickWindow.tickerId = tickSize.tickerId;
	
@Name('UPDATE_TICK_WINDOW_VOL')
on
	IBTickSize as tickSize
update
	TickWindow as tickWindow
set
	tickWindow.vol = tickSize.size
where
	tickSize.field = 8 
and
	tickWindow.tickerId = tickSize.tickerId;

@Name('UPDATE_TICK_WINDOW_OPEN_INTEREST')
on
	IBTickSize as tickSize
update
	TickWindow as tickWindow
set
	tickWindow.openIntrest = tickSize.size
where
	tickSize.field = 22 
and
	tickWindow.tickerId = tickSize.tickerId;

// ----------------------------- TRADES -----------------------------	

@Name('CREATE_FILL')
insert into
	FillImpl
select
	IBUtil.getExecutionDateTime(execDetails.execution.m_time) as dateTime,
	Side.valueOf(openOrder.`order`.m_action) as side,
	execDetails.execution.m_shares as quantity,
	RoundUtil.getBigDecimal(execDetails.execution.m_price) as price,
	//RoundUtil.getBigDecimal(openOrder.orderState.m_commission) as commission,
	RoundUtil.getBigDecimal(1.0) as commission,
	genericOrder as parentOrder
from 
	pattern[
		every genericOrder=GenericOrder 
		-> (
			every (
				openOrder=IBOpenOrder(orderId = genericOrder.number) 
				and execDetails=IBExecDetails(execution.m_orderId = genericOrder.number)
			)
			and not IBOrderStatus(orderId = genericOrder.number and (status = 'Filled' or  status = 'Cancelled'))
		)
	]; 

@Name('CREATE_ORDER_STATUS')
insert into
	OrderStatusImpl
select
	case
		when (orderStatus.status = 'Submitted' or orderStatus.status = 'PendingSubmit') and orderStatus.filled = 0 then Status.SUBMITTED
		when (orderStatus.status = 'Submitted' or orderStatus.status = 'PendingSubmit') and orderStatus.filled > 0 then Status.PARTIALLY_EXECUTED
		when orderStatus.status = 'Filled' then Status.EXECUTED
		when orderStatus.status = 'Cancelled' then Status.CANCELED
	end as status,
	orderStatus.filled as filledQuantity,
	orderStatus.remaining as remainingQuantity,
	genericOrder as parentOrder
from 
	pattern[every genericOrder=GenericOrder -> every (orderStatus=IBOrderStatus(orderId = genericOrder.number))]
where
	prior(1, orderStatus) = null
or	
	orderStatus.status != prior(1, orderStatus.status)
or
	orderStatus.filled != prior(1, orderStatus.filled); 
