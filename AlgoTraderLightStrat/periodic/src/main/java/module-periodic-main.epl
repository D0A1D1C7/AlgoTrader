module movMain;

// --------------------- periodic trades every 10 seconds -------------------------
/*
@Name('CREATE_BUY_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
1000 as quantity
from pattern [timer:interval(20 sec)];

@Name('CREATE_SELL_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
-1000 as quantity
from pattern [every timer:interval(20 sec)] output every 10 sec;
*/

// ------------------ market order and corresponding cancel ----------------------

/*
@Name('CREATE_MARKET_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateMarketOrderSubscriber')
select
1000 as quantity
from pattern [timer:interval(2 sec)];

@Name('CANCEL_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.OrderServiceImpl$CancleOrderSubscriber')
select
marketOrder.number as orderNumer
from pattern [every marketOrder=MarketOrder -> (timer:interval(1 sec) and not OrderStatus(status = Status.EXECUTED))];
*/

// ------------------ limit order and corresponding order modification ---------


@Name('CREATE_LIMIT_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.periodic.PeriodicServiceImpl$CreateLimitOrderSubscriber')
select
1000 as quantity,
tick.bid
from pattern [tick=Tick]
where tick.security.symbol = 'GOOG';

@Name('MODIFY_LIMIT_ORDER')
@Tag(name='subscriber', value='com.algoTrader.service.periodic.PeriodicServiceImpl$ModifyLimitOrderSubscriber')
select
limitOrder,
limitOrder.`limit` + 0.1
from pattern [every limitOrder=LimitOrder -> (timer:interval(2 sec) and not OrderStatus(status = Status.EXECUTED))];


// -------------------- debug statements -----------------------------------------

@Tag(name='subscriber', value='com.algoTrader.subscriber.TestSubscriber')
select 'Order' as eventType, * from GenericOrder;

@Tag(name='subscriber', value='com.algoTrader.subscriber.TestSubscriber')
select 'OrderStatus' as eventType, * from OrderStatus;

@Tag(name='subscriber', value='com.algoTrader.subscriber.TestSubscriber')
select 'Fill' as eventType, * from Fill;

@Tag(name='subscriber', value='com.algoTrader.subscriber.TestSubscriber')
select 'Transaction' as eventType, * from Transaction;
